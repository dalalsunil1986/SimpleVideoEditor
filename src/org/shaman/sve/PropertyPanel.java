/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.shaman.sve;

import com.l2fprod.common.propertysheet.Property;
import com.l2fprod.common.propertysheet.PropertySheet;
import com.l2fprod.common.propertysheet.PropertySheetPanel;
import java.awt.BorderLayout;
import java.beans.*;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.undo.UndoableEditSupport;
import org.shaman.sve.model.Project;
import org.shaman.sve.model.TimelineObject;

/**
 *
 * @author Sebastian
 */
public class PropertyPanel extends javax.swing.JPanel implements PropertyChangeListener {

	private static final Logger LOG = Logger.getLogger(PropertyPanel.class.getName());

	private Project project;
	private UndoableEditSupport undoSupport;
	private Selections selections;
	
	private PropertySheetPanel sheet;
	private TimelineObject selectedObject;
	
	/**
	 * Creates new form PropertyPanel
	 */
	public PropertyPanel() {
		sheet = new PropertySheetPanel();
		initComponents();
		sheet.setMode(PropertySheet.VIEW_AS_FLAT_LIST);
		sheet.setToolBarVisible(true);
		sheet.setDescriptionVisible(true);
		sheet.addPropertySheetChangeListener(this);
		
		mainPanel.setLayout(new BorderLayout());
		mainPanel.add(sheet);
		
		setSelectedObject(null);
	}

	public void setProject(Project project) {
		this.project = project;
		project.addPropertyChangeListener(this);
	}

	public void setUndoSupport(UndoableEditSupport undoSupport) {
		this.undoSupport = undoSupport;
	}

	public void setSelections(Selections selections) {
		this.selections = selections;
		selections.addPropertyChangeListener(this);
	}
	
	public void setSelectedObject(TimelineObject obj) {
		if (selectedObject != null) {
			selectedObject.removePropertyChangeListener(this);
		}
		selectedObject = obj;
		
		LOG.log(Level.INFO, "{0} selected", obj);
		if (obj == null) {
			currentObjectLabel.setText("no object selected");
			sheet.setProperties(new Property[0]);
		} else {
			obj.addPropertyChangeListener(this);
			currentObjectLabel.setText(obj.toString());
			try {
				BeanInfo info = Introspector.getBeanInfo(obj.getClass());
				sheet.setBeanInfo(info);
//				sheet.readFromObject(obj);
				Property[] props = sheet.getProperties();
				for (Property prop : props) {
					prop.readFromObject(obj);
					prop.addPropertyChangeListener(this);
				}
				sheet.repaint();
			} catch (Exception ex) {
				Logger.getLogger(PropertyPanel.class.getName()).log(Level.SEVERE, null, ex);
			}
			
		}
	}
	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        currentObjectLabel = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setMaximumSize(new java.awt.Dimension(300, 32767));
        setMinimumSize(new java.awt.Dimension(300, 200));
        setPreferredSize(new java.awt.Dimension(300, 459));

        currentObjectLabel.setText("jLabel1");

        mainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mainPanel.setPreferredSize(new java.awt.Dimension(200, 424));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentObjectLabel)
                .addContainerGap(271, Short.MAX_VALUE))
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentObjectLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currentObjectLabel;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables

	@Override
	public void propertyChange(PropertyChangeEvent pce) {
		if (pce.getSource() == selections) {
			if (pce.getPropertyName().equals(Selections.PROP_SELECTED_TIMELINE_OBJECT)) {
				setSelectedObject((TimelineObject) pce.getNewValue());
			}
		} else if (pce.getSource() == sheet && selectedObject != null) {
			LOG.info("value edited");
			project.fireTimelineObjectChanged(selectedObject);
		} else if (pce.getSource() instanceof Property && selectedObject != null) {
			LOG.info("value edited");
			((Property) pce.getSource()).writeToObject(selectedObject);
			project.fireTimelineObjectChanged(selectedObject);
		} else if (pce.getSource() == selectedObject) {
			Property[] props = sheet.getProperties();
			for (Property prop : props) {
				prop.readFromObject(selectedObject);
			}
			project.fireTimelineObjectChanged(selectedObject);
		}
	}
}
